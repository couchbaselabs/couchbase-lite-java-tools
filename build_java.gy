//
//  Pipeline build for Java product
//

// These three methods set the tags that determine which agent will run a stage
def static osxNode() { return "cbl-java&&macosx_x86_64" }

def static windowsNode(version) {
    switch (version) {
        case ~/3\..+/:
            return "cbl-java&&windows2016"
        case ~/2\.8\../:
            return "cbl-java&&windows2016"
        default:
            return "cbl-java&&window"
    }
}

// check for pre- or post lithium build
static boolean isNewWorkspace(version) {
    String[] v = version.split("\\.")
    if (v.length < 2) { throw new IllegalArgumentException("Bad version: ${version}") }

    int majorVersion = v[0].toInteger()

    return (majorVersion >= 3) || ((majorVersion == 2) && (v[1].toInteger >= 8))
}

static String getRootDir(ws, version) { return (!isNewWorkspace(version)) ? ws : "${ws}/cbl-java" }

static String getBuildDir(rootDir, version, edition) {
    boolean isNewWs = isNewWorkspace(version)
    switch (edition) {
        case 'enterprise':
            return (isNewWs) ? "${rootDir}/ee/java" : "${rootDir}/couchbase-lite-java-ee"
        case 'community':
            return (isNewWs) ? "${rootDir}/ce/java" : "${rootDir}/couchbase-lite-java"
        default:
            throw new IllegalArgumentException("Bad edition: ${edition}")
    }
}

static String uName(credentials) { return credentials.split(":")[0] }
static String pwd(credentials) { return credentials.split(":")[1] }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////   BUILD PIPELINE   /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pipeline {
    agent { label "cbl-java&&centos73" }
    environment {
        LATESTBUILDS = "http://latestbuilds.service.couchbase.com/builds/latestbuilds"
        SOURCE = "couchbase-lite-java-${VERSION}-${BLD_NUM}-source.tar.gz"
        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
    }
    options {
        // ??? Doesn't work
        // buildDiscarder(logRotator(numToKeepStr: '10'))
        skipDefaultCheckout(true)
    }
    stages {
        stage('Set build name') {
            steps {
                script { currentBuild.displayName = "${VERSION}-${EDITION}-${BLD_NUM}" }
            }
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////   STATIC ANALYSIS   ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        stage('Check') {
            steps {
                // Clean the workspace
                cleanWs(deleteDirs: true, 
                         disableDeferredWipeout: true)

                // Download the source
                sh '''#!/bin/bash
echo "======== Linux: Download source: ${SOURCE}"
curl -LO "${LATESTBUILDS}/couchbase-lite-java/${RELEASE}/${BLD_NUM}/${SOURCE}"

echo "======== Linux: Extract source"
tar xzf ${SOURCE}
rm *-source.tar.gz

echo "======== Linux: Force version ${VERSION}"
echo "${VERSION}" > "${CBL_ROOT}/version.txt"
'''

                // Run checks
                sh '''#!/bin/bash
cd "${BUILD_DIR}"

touch "local.properties"

echo "======== Linux: Environment"
javac -version
env | sort

echo "======== Linux: Check in `pwd`"
./etc/jenkins/check.sh ${BLD_NUM} || exit $?
'''
            }
        }

        stage('Platform Builds') {
            parallel {


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////   O S X   B U I L D   /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                stage('Build OSX') {
                    agent { label osxNode() }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    stages {
                        stage('OSX: Build') {
                            steps {
                                // Clean the workspace
                                cleanWs(deleteDirs: true, 
                                         disableDeferredWipeout: true)

                                // Download the source
                                sh '''#!/bin/bash
echo "======== OSX: Download source: ${SOURCE}"
curl -LO "${LATESTBUILDS}/couchbase-lite-java/${RELEASE}/${BLD_NUM}/${SOURCE}"

echo "======== OSX: Extract source"
tar xzf ${SOURCE}
rm *-source.tar.gz

echo "======== OSX: Force version ${VERSION}"
echo "${VERSION}" > "${CBL_ROOT}/version.txt"
'''

                                // Run the build
                                sh '''#!/bin/bash
export JAVA_HOME="/usr/local/opt/java11"
export PATH="${JAVA_HOME}/bin:$PATH"

cd "${BUILD_DIR}"

echo "======== OSX: Environment"
javac -version
env | sort

touch "local.properties"

echo "======== OSX: Build in `pwd`"
./etc/jenkins/build_macos.sh ${BLD_NUM} || exit $?
'''
                            }
                        }

                        // Publish to maven
                        stage('OSX: Publish phase I artifacts') {
                            environment { MAVEN_REPO = credentials('ProgetApiKey') }
                            steps {
                                script {
                                    env.MAVEN_REPO_USR = uName(env.MAVEN_REPO)
                                    env.MAVEN_REPO_PSW = pwd(MAVEN_REPO)
                                }

                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh '''#!/bin/bash
cd "${BUILD_DIR}"

echo "maven.repo.user=${MAVEN_REPO_USR}" > "local.properties"
echo "maven.repo.pass=${MAVEN_REPO_PSW}" >> "local.properties"

echo "======== OSX: Publish"
ARTIFACTS_DIR="$WORKSPACE/artifacts"
rm -rf "${ARTIFACTS_DIR}"
mkdir -p "${ARTIFACTS_DIR}"

./etc/jenkins/publish_macos.sh "${VERSION}" "${BLD_NUM}" "${ARTIFACTS_DIR}" "${WORKSPACE}" || exit $?
'''
                                }

                                // Publish to latestbuilds
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "artifacts/*.*",
                                                        removePrefix: "artifacts",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////   W I N D O W S   B U I L D    /////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                stage('Build Windows') {
                    agent { label windowsNode("${VERSION}") }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    stages {
                        stage('Win: Build') {
                            steps {
                                // Clean the workspace
                                cleanWs(deleteDirs: true, 
                                         disableDeferredWipeout: true)

                                // Install Java 11
                                powershell '''
Invoke-Webrequest -Uri "http://downloads.build.couchbase.com/cbdep/cbdep.windows-x86_64.exe" -Outfile "cbdep.exe"
./cbdep.exe install -d $env:WORKSPACE java 11.0.3
'''
                                // Download the source
                                powershell '''
Write-Host "======== Windows: Download source"
$SITE="$env:LATESTBUILDS/couchbase-lite-java/$env:RELEASE/$env:BLD_NUM/$env:SOURCE"

try {
  (New-Object Net.WebClient).DownloadFile($SITE, $env:SOURCE)
}
catch {
    Write-Host "Failed with error" $_.Exception.toString()
}

Write-Host "======== Windows: Extract source"

try {
    cmake -E tar xzf $env:SOURCE
}
catch {
    Write-Host "Failed with error" $_.Exception.toString()
}

Write-Host "======== Windows: Force version " $env:VERSION
Set-Content "$env:CBL_ROOT\\version.txt" -Value "$env:VERSION"
Exit

'''

                                // Run the build
                                powershell '''
$env:PATH = "$env:WORKSPACE\\java-11.0.3\\bin;$env:PATH"

try { Set-Location $env:BUILD_DIR }
catch {
 Write-Host "Failed with error" $_.Exception.toString()
}

Write-Host "======== Windows: Environment"
javac -version
Get-ChildItem Env: | Sort Name

New-Item ".\\local.properties"

Write-Host "======== Windows: Build in " $env:BUILD_DIR

& $env:BUILD_DIR\\etc\\jenkins\\build_windows.ps1 -vsGen "2017" -buildNumber $env:BLD_NUM
if($LASTEXITCODE -ne 0){
 Write-Host "Failed with error" $LASTEXITCODE
 Exit $LASTEXITCODE
}
Exit
'''
                            }
                        }

                        // Publish to maven
                        stage('Win: Publish phase I artifacts') {
                         
                            environment { MAVEN_REPO = credentials('ProgetApiKey') }
                            steps {
                                script {
                                    env.MAVEN_REPO_USR = uName(env.MAVEN_REPO)
                                    env.MAVEN_REPO_PSW = pwd(MAVEN_REPO)
                                }

                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                 powershell '''
$env:PATH = "$env:WORKSPACE\\java-11.0.3\\bin;$env:PATH"

try{Set-Location $env:BUILD_DIR}
catch{
 Write-Host "Failed with error" $_.Exception.toString()
}

Set-Content ".\\local.properties" -Value "maven.repo.user=$env:MAVEN_REPO_USR"
Add-Content ".\\local.properties" -Value "maven.repo.pass=$env:MAVEN_REPO_PSW"


Write-Host "======= Windows: Publish"
New-Item -ItemType "directory" -Path "$env:WORKSPACE\\artifacts"


& $env:BUILD_DIR\\etc\\jenkins\\publish_windows.ps1 -version $env:VERSION -buildNumber $env:BLD_NUM  -artifactsDir "$env:WORKSPACE\\artifacts"
if($LASTEXITCODE -ne 0){
 Write-Host "Failed with error" $LASTEXITCODE
 Exit $LASTEXITCODE
}

Exit

'''
                                }

                                // Publish to latestbuilds
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "artifacts/*.*",
                                                        removePrefix: "artifacts",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////   L I N U X   B U I L D   //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        stage('Linux: Build') {
            steps {
                sh '''#!/bin/bash
cd "${BUILD_DIR}"

echo "======== Linux: Build in `pwd`"
./etc/jenkins/build_linux.sh "${VERSION}" "${BLD_NUM}" "${WORKSPACE}" || exit $?
'''
            }
        }

        /// Publish to maven
        stage('Linux: Publish Phase II artifacts') {
            environment { MAVEN_REPO = credentials('ProgetApiKey') }
            steps {
                script {
                    env.MAVEN_REPO_USR = uName(env.MAVEN_REPO)
                    env.MAVEN_REPO_PSW = pwd(MAVEN_REPO)
                }

                sh '''#!/bin/bash
cd "${BUILD_DIR}"

echo "maven.repo.user=${MAVEN_REPO_USR}" > "local.properties"
echo "maven.repo.pass=${MAVEN_REPO_PSW}" >> "local.properties"

echo "======== Linux: Publish"
ARTIFACTS_DIR="$WORKSPACE/artifacts"
rm -rf "${ARTIFACTS_DIR}"
mkdir -p "${ARTIFACTS_DIR}"

./etc/jenkins/publish_linux.sh "${VERSION}" "${BLD_NUM}" "${ARTIFACTS_DIR}" "${WORKSPACE}" || exit $?
'''
            }

            // Should we be publishing Linux intermediates?
        }

        stage('Platform Tests') {
            parallel {


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////   O S X   T E S T   //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                stage('Test OSX') {
                    agent { label osxNode() }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    stages {
                        stage('OSX: Test') {
                            steps {
                                // Clean the workspace
                                cleanWs(deleteDirs: true,
                                disableDeferredWipeout: true)

                                // Download the source
                                sh '''#!/bin/bash
echo "======== OSX: Download source: ${SOURCE}"
curl -LO "${LATESTBUILDS}/couchbase-lite-java/${RELEASE}/${BLD_NUM}/${SOURCE}"

echo "======== OSX: Extract source"
tar xzf ${SOURCE}
rm *-source.tar.gz

echo "======== OSX: Force version ${VERSION}"
echo "${VERSION}" > "${CBL_ROOT}/version.txt"
'''

                                // Run the tests
                                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                                sh '''#!/bin/bash
cd "${BUILD_DIR}"

touch "local.properties"

echo "======== OSX: Test in `pwd`"
REPORTS_DIR="$WORKSPACE/reports"
rm -rf "${REPORTS_DIR}"
mkdir -p "${REPORTS_DIR}"

./etc/jenkins/test_macos.sh ${BLD_NUM} "${REPORTS_DIR}" || exit $?
'''
                                }

                                // Upload test logs
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "reports/*.zip",
                                                        removePrefix: "reports",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ])
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////   W I N D O W S   T E S T   //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                stage('Test Windows') {
                    agent { label windowsNode("${VERSION}") }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    stages {
                        stage('Win: Test') {
                            steps {
                                // Clean the workspace
                                cleanWs(deleteDirs: true, 
                                 		disableDeferredWipeout: true)
                                 // Install Java 11
                                powershell '''
Invoke-Webrequest -Uri "http://downloads.build.couchbase.com/cbdep/cbdep.windows-x86_64.exe" -Outfile "cbdep.exe"
./cbdep.exe install -d $env:WORKSPACE java 11.0.3
'''
                                // Download the source
                                powershell '''
Write-Host "======== Windows: Download source"
$SITE="$env:LATESTBUILDS/couchbase-lite-java/$env:RELEASE/$env:BLD_NUM/$env:SOURCE"

try {
    (New-Object Net.WebClient).DownloadFile($SITE, $env:SOURCE)
}
catch {
   Write-Host "Failed with error" $_.Exception.toString()
}

Write-Host "======== Windows: Extract source"

try {
    cmake -E tar xzf $env:SOURCE
}
catch {
    Write-Host "Failed with error" $_.Exception.toString()
}

Write-Host "======== Windows: Force version" $env:VERSION
Set-Content "$env:CBL_ROOT\\version.txt" -Value "$env:VERSION"
Exit

'''

                                // Run the tests
                                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                                powershell '''
$env:PATH = "$env:WORKSPACE\\java-11.0.3\\bin;$env:PATH"

try {Set-Location $env:BUILD_DIR}
catch {
     Write-Host "Failed with error" $_.Exception.toString()
}

New-Item ".\\local.properties"

Write-Host "======== Windows: Test"
New-Item -ItemType "directory" -Path "$env:WORKSPACE\\reports"


& $env:BUILD_DIR\\etc\\jenkins\\test_windows.ps1 -buildNumber $env:BLD_NUM -reportsDir "$env:WORKSPACE\\reports"
if($LASTEXITCODE -ne 0){
	Exit 5
}

Exit
'''
                                }

                                // Upload test logs
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "reports/*.zip",
                                                        removePrefix: "reports",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ])
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////   L I N U X   T E S T   //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // It would be great if we could run this stage in parallel.
        // If it explicitly requests an agent, it deadlocks this job.
        // I wonder if it were in the parallel clause, but didn't have
        // an agent specifier, it would run on the current agent...
        stage('Linux: Test') {
            steps {
                // Run the tests
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh '''#!/bin/bash
cd "${BUILD_DIR}"

echo "======== Linux: Test in `pwd`"
REPORTS_DIR="$WORKSPACE/reports"
rm -rf "${REPORTS_DIR}"
mkdir -p "${REPORTS_DIR}"

./etc/jenkins/test_linux.sh "${BLD_NUM}" "${REPORTS_DIR}" || exit $?
'''
                }

                // Upload test logs
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sshPublisher(
                        continueOnError: true,
                        failOnError: false,
                        publishers: [
                            sshPublisherDesc(
                                configName: "latestbuilds",
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: "reports/*.zip",
                                        removePrefix: "reports",
                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                        execCommand: ""
                                    )
                                ])
                        ]
                    )
                }
            }
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////   P U B L I S H   ////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        stage('Publish final artifacts') {
            steps {
                // This *MUST* republish the same bits that were
                // published above, in the Linux: Publish to ciMaven
                // step.  This really should just promote the ciMaven
                // bits to internalMaven but, apparently, we can't
                // afford a real version of proget.

                // Publish to Maven
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh '''#!/bin/bash
cd "${BUILD_DIR}"

ARTIFACTS_DIR="$WORKSPACE/artifacts"
rm -rf "${ARTIFACTS_DIR}"
mkdir -p "${ARTIFACTS_DIR}"

./etc/jenkins/publish_linux.sh "${VERSION}" "${BLD_NUM}" "${ARTIFACTS_DIR}" "${WORKSPACE}" internalmaven || exit $?
'''
                }

                // Publish Zip
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sshPublisher(
                        continueOnError: true,
                        failOnError: false,
                        publishers: [
                            sshPublisherDesc(
                                configName: "latestbuilds",
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: "artifacts/*.*",
                                        removePrefix: "artifacts",
                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                        execCommand: ""
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        unstable {
            mail to: 'mobile_dev_java@couchbase.com',
                subject: "Java build is unstable",
                body: "JAVA build ${VERSION}-${EDITION}-${BLD_NUM} is unstable"
        }
        failure {
            mail to: 'mobile_dev_java@couchbase.com',
                subject: "Java build failed",
                body: "JAVA build ${VERSION}-${EDITION}-${BLD_NUM} faild"
        }
    }
}
